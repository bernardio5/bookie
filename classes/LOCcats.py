import os
import sys

from c_paths import paths

# reads LOC categories & creates a topics list with subtopics lists
# each LOC mark is a first letter, a second letter or a number, then a text description.

# there are two files: LOCtopics, ~48k lines, and LOCcategories, ~450 lines (first two letters)

# the allLOCsubjects class makes a tree: 25 first-letter ("orders"?). 
#   each order contains the two-letter combinations in that section ("families"?)
#   each family contains all the LOCcategories in that topic in a list ("genii"?)
#   each genus contains a list of books, from which we get a list of authors. 

# The library's book ordering is order-family-genus-author-title
# Books with multiple topic strings occur that many times. 
# The call numbers are generated by concatenating the two letters, a genus number, 
# author name up to 10 characters, book title up to 10 characters
# (what about multiple editions? what about re-scans?)

# eh, just get this working. If you need to renumber everything, it's not like you
# have to print new stickers.

#this is the change that I made


class LOCsubject:
    def __init__(self):
        name = "-" # name string for humans
        thisid = "-" # string used for matching
        nextid = "-" # for E and F
        isSimple = True
        indentation = 0
        section = -1
        subsection = -1
        floater = -1.0  # single 

    def init(self, str):
        # section is first letter
        section = ln[0]
        floater = float(int(section) - int("A") + 1)
        
        # subject is second letter-first space
        firstSpace = ln.firstIndOf(" ")

        # indentation is # dashes after space
        firstDash = ln.firstInfOf("-")
        lastDash = ln.lstIndOf("_")
        indentation = lastDash-firstDash
                

    # given a subject description string, return -1 for can't find, or an index? what. 
    def owns(self, string):




class allLOCsubjects:
    def __init__(self):
        self.lineCounter = 0
        self.subjs = []
        thePaths = paths()
        with open(thePaths.LOCpath) as f:
            content = f.readlines()
            self.lineCounter = len(content)
            for ln in content:
                sb = subject()
                sb.init(ln)
                self.subjects.append(sb)

# matching? searching? etc? 

